#来通过gradle wrapper测试一下SpringBoot实例项目
# 构建测试自动化
./gradlew test
# 输出如下所示
# HelloControllerIT > getHello() FAILED
#     org.opentest4j.AssertionFailedError at HelloControllerIT.java:36
# HelloControllerTest > getHello() FAILED
#     java.lang.AssertionError at HelloControllerTest.java:27

#分别打开这两个文件看一下是什么情况导致的问题
vi src/test/java/com/example/springboot/HelloControllerIT.java

#我们只需要将代码末尾的Spring Boot!改成k8s!即可
@Test
public void getHello() throws Exception {
    ResponseEntity<String> response = template.getForEntity(base.toString(),
            String.class);
    assertThat(response.getBody()).isEqualTo("Greetings from k8s!");
}

#再来看一下另一个报错的文件
vi src/test/java/com/example/springboot/HelloControllerTest.java

#改完后如下
@Test
public void getHello() throws Exception {
    mvc.perform(MockMvcRequestBuilders.get("/").accept(MediaType.APPLICATION_JSON))
            .andExpect(status().isOk())
            .andExpect(content().string(equalTo("Greetings from k8s!")));
}

#这时再来试一下看项目的自动化测试是否能成功被运行起来
./gradlew test
# 输出如下所示
# BUILD SUCCESSFUL in 55s

#测试通过了，最后再来试一下看直接构建能否通过
./gradlew build
# 输出如下所示
# BUILD SUCCESSFUL in 1s

#执行以下命令即可启动服务器并部署SpringBoot项目
java -jar build/libs/spring-boot-0.0.1-SNAPSHOT.jar > applog.txt
# applog.txt是日志文件，如果希望应用在后台运行则使用该命令：
# nohup java -jar build/libs/spring-boot-0.0.1-SNAPSHOT.jar > applog.txt &

#打开浏览器访问服务器地址的8080端口，读者需要访问自己服务器的IP地址
http://54.79.10.166:8080/
# 页面响应内容如下
# Greetings from k8s!

#这时需要将做过的变更发布至远程仓库，首先查看一下所做的变更
git status
# 输出如下所示
#       modified:   build.gradle
#       modified:   src/test/java/com/example/springboot/HelloControllerIT.java
#       modified:   src/test/java/com/example/springboot/HelloControllerTest.java

#以上输出表示有三个文件做了变更，接下来将这些更新的文件添加至暂存区
git add .

#然后再将它们从暂存区提交至本地仓库
git commit -m "将测试里断言处的Spring Boot改成k8s以修复构建时自动化测试无法通过的问题"
# 输出如下所示
# 3 files changed, 10 insertions(+), 2 deletions(-)

#最后将它们从本地仓库发布至代码托管平台
git push
# 遇到Enter passphrase时输入生成私钥时提供的密码